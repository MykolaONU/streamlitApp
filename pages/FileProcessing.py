import re
import pandas as pd
import streamlit as st
from PyPDF2 import PdfReader
from io import BytesIO
from function import addColumns

# --- –¢–∏–ø–æ–≤—ñ –ø–æ–∑–∏—Ü—ñ—ó –∑—Ä—ñ–∑—ñ–≤ ---
default_column_slices = {
    'ymd': (0, 9),
    'to': (9, 15),
    'tm': (15, 20),
    'te': (20, 26),
    'xray/opt': (26, 35),
    'L': (35, 42),
    'coord': (42, 53),
    'AR': (53, 59),
    'radio': (59, 65),
    'mhr': (65, 72),
    'dynamic': (72, 77),
    'sweep': (77, 81),
    'CME': (81, 100),
    'xray-hard': (100, 124),
    'protons': (124, None)
}

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è session state ---
if "column_slices" not in st.session_state:
    st.session_state.column_slices = default_column_slices.copy()
if "selected_column" not in st.session_state:
    st.session_state.selected_column = list(default_column_slices.keys())[0]

# --- –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è: –ø–∞—Ä—Å–∏–Ω–≥ PDF —É DataFrame ---
def parse_pdf(uploaded_file):
    reader = PdfReader(uploaded_file)
    pattern = re.compile(r"^(?P<y>\d{4})(?P<m>\d{2})(?P<d>\d{2})\s+")
    data_list = []

    for page in reader.pages:
        text = page.extract_text()
        for line in text.splitlines():
            if pattern.match(line):
                row = []
                for col, (start, end) in st.session_state.column_slices.items():
                    value = line[start:end].strip() if end else line[start:].strip()
                    row.append(value)
                data_list.append(row)
    df = pd.DataFrame(data_list, columns=list(st.session_state.column_slices.keys()))
    return addColumns(df)

# --- –ë–æ–∫–æ–≤–∞ –ø–∞–Ω–µ–ª—å: —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–æ–ª–æ–Ω–æ–∫ ---
def show_column_editor():
    st.sidebar.header("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–ª–æ–Ω–æ–∫")
    columns = list(st.session_state.column_slices.keys())
    selected_column = st.sidebar.selectbox("–û–±–µ—Ä—ñ—Ç—å –∫–æ–ª–æ–Ω–∫—É", columns, index=columns.index(st.session_state.selected_column))
    st.session_state.selected_column = selected_column

    col_index = columns.index(selected_column)
    current_start, current_end = st.session_state.column_slices[selected_column]

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
    prev_start = st.session_state.get(f"{selected_column}_prev_start", current_start)
    prev_end = st.session_state.get(f"{selected_column}_prev_end", current_end if current_end else 0)

    # –ü–æ–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è
    new_start = st.sidebar.number_input("–ó—Å—É–≤ –∑–ª—ñ–≤–∞", value=current_start, key=f"{selected_column}_start_input")
    new_end = st.sidebar.number_input("–ó—Å—É–≤ —Å–ø—Ä–∞–≤–∞ (0 = –¥–æ –∫—ñ–Ω—Ü—è)", value=current_end if current_end else 0, key=f"{selected_column}_end_input")

    updated_end = int(new_end) if new_end != 0 else None

    # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω—É –∫–æ–ª–æ–Ω–∫—É
    st.session_state.column_slices[selected_column] = (int(new_start), updated_end)

    # –û–Ω–æ–≤–ª—é—î–º–æ —Å—É—Å—ñ–¥–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏
    if col_index + 1 < len(columns):
        next_col = columns[col_index + 1]
        _, next_end = st.session_state.column_slices[next_col]
        st.session_state.column_slices[next_col] = (updated_end if updated_end is not None else new_start, next_end)

    if col_index - 1 >= 0:
        prev_col = columns[col_index - 1]
        prev_start_val, _ = st.session_state.column_slices[prev_col]
        st.session_state.column_slices[prev_col] = (prev_start_val, int(new_start))

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
    st.session_state[f"{selected_column}_prev_start"] = int(new_start)
    st.session_state[f"{selected_column}_prev_end"] = int(new_end)

    # –Ø–∫—â–æ —î –∑–º—ñ–Ω–∏ ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
    if int(new_start) != prev_start or int(new_end) != prev_end:
        st.rerun()

    if st.sidebar.button("üîÑ –°–∫–∏–Ω—É—Ç–∏ –≤—Å—ñ –∑—Ä—ñ–∑–∏"):
        st.session_state.column_slices = default_column_slices.copy()
        for col in columns:
            st.session_state.pop(f"{col}_prev_start", None)
            st.session_state.pop(f"{col}_prev_end", None)
        st.rerun()

# --- –û—Å–Ω–æ–≤–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
st.title("–û–±—Ä–æ–±–∫–∞ PDF –∑ –¥–∞–Ω–∏–º–∏")
uploaded_file = st.file_uploader("–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ PDF-—Ñ–∞–π–ª", type="pdf")

if uploaded_file:
    df = parse_pdf(uploaded_file)

    if st.toggle("‚öôÔ∏è –ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑—Ä—ñ–∑—ñ–≤", key="show_editor_toggle"):
        show_column_editor()
    st.success("–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö:")
    st.dataframe(df)

    st.session_state.df = df
    st.markdown("---")

    def to_excel_bytes(dataframe):
        output = BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            dataframe.to_excel(writer, index=False)
        return output.getvalue()

    st.download_button(
        label="üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ Excel",
        data=to_excel_bytes(df),
        file_name="—Ä–µ–∑—É–ª—å—Ç–∞—Ç_–æ–±—Ä–æ–±–∫–∏.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
