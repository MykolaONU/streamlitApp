import streamlit as st
import pandas as pd
import plotly.express as px
from function import addColumns
import os
import numpy as np

xray_class_colors = {
        "A": "#a9a9a9",  # –°—ñ—Ä–∏–π
        "B": "#66c2a5",  # –ó–µ–ª–µ–Ω–æ-–±—ñ—Ä—é–∑–æ–≤–∏–π
        "C": "#fc8d62",  # –ü–æ–º–∞—Ä–∞–Ω—á–µ–≤–æ-—á–µ—Ä–≤–æ–Ω–∏–π
        "M": "#8da0cb",  # –°–∏–Ω—ñ–π
        "X": "#e78ac3",  # –†–æ–∂–µ–≤–∏–π
    }

common_params = dict(
            color="x_ray_class",
            color_discrete_map=xray_class_colors,
            category_orders={"x_ray_class": list(xray_class_colors.keys())},
            # size="peak_flux",
            opacity=0.7,
            labels={"lat": "–®–∏—Ä–æ—Ç–∞ (¬∞)", "date": "–î–∞—Ç–∞", "group": "–î–∞—Ç–∞"},
        )


st.title("üìä –ì—Ä–∞—Ñ—ñ–∫–∏ —Å–æ–Ω—è—á–Ω–∏—Ö —Å–ø–∞–ª–∞—Ö—ñ–≤")

# –ó–∞–≤–∂–¥–∏ –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –Ω–æ–≤–∏–π —Ñ–∞–π–ª
uploaded_file = st.file_uploader("–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–∞–π–ª Excel –∞–±–æ CSV (–ø–æ–≤—Ç–æ—Ä–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ)", type=["xlsx", "csv"])

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª—É, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–≤ —Å–≤—ñ–π
DEFAULT_FILE_PATH = "data/extracted_data.csv"
if "df" not in st.session_state and os.path.exists(DEFAULT_FILE_PATH):
    try:
        df = pd.read_csv(DEFAULT_FILE_PATH, dtype=str)
        st.session_state.df = df
    except Exception as e:
        st.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: {e}")

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö
if "df" not in st.session_state:
    st.warning("–°–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ç–∞ –æ–±—Ä–æ–±—ñ—Ç—å PDF –Ω–∞ –≥–æ–ª–æ–≤–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –∞–±–æ Excel/CSV-—Ñ–∞–π–ª –≤–∏—â–µ.")
    st.stop()

df = st.session_state.df
df = addColumns(df)

# –û–±—Ä–æ–±–∫–∞ –¥–∞—Ç–∏
if "date" in df.columns:
    try:
        df["date"] = pd.to_datetime(df["date"])
    except:
        st.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ —Å—Ç–æ–≤–ø–µ—Ü—å 'date' —É —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏.")
        st.stop()
else:
    st.error("–°—Ç–æ–≤–ø–µ—Ü—å 'date' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    st.stop()

# –°–ª–∞–π–¥–µ—Ä –¥–ª—è –≤–∏–±–æ—Ä—É –¥—ñ–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç
min_date = df["date"].min().date()
max_date = df["date"].max().date()

date_range = st.slider(
    "–û–±–µ—Ä—ñ—Ç—å –¥—ñ–∞–ø–∞–∑–æ–Ω –¥–∞—Ç",
    min_value=min_date,
    max_value=max_date,
    value=(min_date, max_date),
    format="YYYY-MM-DD"
)

# –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ –æ–±—Ä–∞–Ω–∏–º –¥—ñ–∞–ø–∞–∑–æ–Ω–æ–º
filtered_df = df[
    (df["date"] >= pd.to_datetime(date_range[0])) &
    (df["date"] <= pd.to_datetime(date_range[1]))
]

# –°—Ç–æ–≤–ø—á–∏–∫–æ–≤–∞ –¥—ñ–∞–≥—Ä–∞–º–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å–ø–∞–ª–∞—Ö—ñ–≤
count_by_group = (
    filtered_df.groupby("date")
    .size()
    .reset_index(name="–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø–∞–ª–∞—Ö—ñ–≤")
)

fig_bar = px.bar(count_by_group, x="date", y="–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø–∞–ª–∞—Ö—ñ–≤",
                 title=f"–ß–∞—Å—Ç–æ—Ç–∞ —Å–æ–Ω—è—á–Ω–∏—Ö —Å–ø–∞–ª–∞—Ö—ñ–≤")
st.plotly_chart(fig_bar, use_container_width=True)

# –û–±—Ä–æ–±–∫–∞ —á–∏—Å–ª–æ–≤–∏—Ö —Å—Ç–æ–≤–ø—Ü—ñ–≤
numeric_cols = ["lat", "lon", "peak_flux"]
for col in numeric_cols:
    if col in df.columns:
        df[col] = pd.to_numeric(df[col], errors="coerce")

# –¢–æ—á–∫–æ–≤–∞ –¥—ñ–∞–≥—Ä–∞–º–∞ –∑ –µ–∫–≤–∞—Ç–æ—Ä–æ–º
fig_scatter = px.scatter(
    filtered_df,
    x="date",
    y="lat",
    hover_data=["brightness", "importance"],
    # labels={"group": "–î–∞—Ç–∞", "lat": "–®–∏—Ä–æ—Ç–∞"},
    title="–†–æ–∑–ø–æ–¥—ñ–ª —Å–æ–Ω—è—á–Ω–∏—Ö —Å–ø–∞–ª–∞—Ö—ñ–≤ –∑–∞ —à–∏—Ä–æ—Ç–æ—é —É —á–∞—Å—ñ",
    **common_params
)
fig_scatter.add_hline(
    y=0,
    line_dash="dash",
    line_color="gray",
    annotation_text="–ï–∫–≤–∞—Ç–æ—Ä",
    annotation_position="top left"
)
fig_scatter.update_yaxes(title="–®–∏—Ä–æ—Ç–∞ (¬∞)", range=[-90, 90])
fig_scatter.update_traces(marker=dict(line=dict(width=1)))
st.plotly_chart(fig_scatter, use_container_width=True)

# –ì—Ä–∞—Ñ—ñ–∫ 1: –£—Å—ñ —Å–ø–∞–ª–∞—Ö–∏ –∑ –æ–∫—Ä–µ–º–∏–º–∏ –ª—ñ–Ω—ñ—è–º–∏ —Ç—Ä–µ–Ω–¥—É –¥–ª—è –∫–æ–∂–Ω–æ—ó –ø—ñ–≤–∫—É–ª—ñ
df_clean = df[["date", "lat", "x_ray_class", "lat_hemisphere", "brightness", "importance"]].copy()
df_clean = df_clean.dropna(subset=["date", "lat", "lat_hemisphere"])

fig_all = px.scatter(
    df_clean,
    x="date",
    y="lat",
    hover_data=["date", "brightness", "importance"],
    title=f"–®–∏—Ä–æ—Ç–∏ –≤—Å—ñ—Ö —Å–ø–∞–ª–∞—Ö—ñ–≤",
    **common_params
)
fig_all.update_layout(height=500)
fig_all.update_yaxes(title="–®–∏—Ä–æ—Ç–∞ (¬∞)", range=[-90, 90])
fig_all.update_traces(marker=dict(line=dict(width=1)))

# –î–æ–¥–∞—î–º–æ –ª—ñ–Ω—ñ—ó —Ç—Ä–µ–Ω–¥—É –¥–ª—è –∫–æ–∂–Ω–æ—ó –ø—ñ–≤–∫—É–ª—ñ –∑ —Ñ–æ—Ä–º—É–ª–∞–º–∏
for hemisphere, group in df_clean.groupby("lat_hemisphere"):
    group = group.sort_values("date")
    if len(group) < 2:
        continue

    # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –¥–∞—Ç—É —É —á–∏—Å–ª–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–æ–ª—ñ–Ω–æ–º—ñ–∞–ª—å–Ω–æ—ó –∞–ø—Ä–æ–∫—Å–∏–º–∞—Ü—ñ—ó
    x_numeric = pd.to_numeric(group["date"])
    y = group["lat"]
    coef = np.polyfit(x_numeric, y, 1)
    trend_fn = np.poly1d(coef)
    # –ü–æ–±—É–¥–æ–≤–∞ –ª—ñ–Ω—ñ—ó —Ç—Ä–µ–Ω–¥—É
    x_range = np.linspace(x_numeric.min(), x_numeric.max(), 100)
    y_trend = trend_fn(x_range)

    # –†—ñ–≤–Ω—è–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ: y = a¬∑x + b
    a, b = coef
    equation = f"y = {a:.2e}¬∑x + {b:.2f}"

    # –î–æ–¥–∞—î–º–æ –ª—ñ–Ω—ñ—é –Ω–∞ –≥—Ä–∞—Ñ—ñ–∫
    fig_all.add_scatter(
        x=pd.to_datetime(x_range),
        y=y_trend,
        mode="lines",
        name=f"–¢—Ä–µ–Ω–¥ ({hemisphere}): {equation}",
        line=dict(width=2, dash="dot"),
        opacity = 1
    )
fig_all.update_yaxes(title="–®–∏—Ä–æ—Ç–∞ (¬∞)", range=[-90, 90])
fig_all.update_traces(marker=dict(line=dict(width=1)))
st.plotly_chart(fig_all, use_container_width=True)


# --- –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–æ –∫–æ–∂–Ω–æ–º—É —Ü–∏–∫–ª—É ---
if "cycle" in df.columns:
    st.header("üîÅ –ì—Ä–∞—Ñ—ñ–∫–∏ –ø–æ –∫–æ–∂–Ω–æ–º—É —Ü–∏–∫–ª—É")

    df["cycle"] = df["cycle"].astype(str).str.strip()
    cycles = df["cycle"].dropna().unique()

    for cycle in sorted(cycles):
        st.subheader(f"‚òÄÔ∏è –¶–∏–∫–ª {cycle}")
        df_cycle = df[df["cycle"] == cycle]

        # --- –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ü–∏–∫–ª—É ---
        total_count = len(df_cycle)
        cme_count = len(df_cycle[(df_cycle['CME'].str.strip().str.len()>4) & (~df_cycle["CME"].isna())])
        proton_count = len(df_cycle[(~df_cycle["protons"].isna()) & (df_cycle['protons'].str.strip().str.len()>4)])
        cme_percent = (cme_count / total_count * 100) if total_count > 0 else 0
        proton_percent = (proton_count / total_count * 100) if total_count > 0 else 0

        st.markdown(
            f"""
            **üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ü–∏–∫–ª—É {cycle}:**
            - –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø–∞–ª–∞—Ö—ñ–≤: **{total_count}**
            - –ó CME: **{cme_count}** ({cme_percent:.1f}%)
            - –ü—Ä–æ—Ç–æ–Ω–Ω–∏—Ö: **{proton_count}** ({proton_percent:.1f}%)
            """
        )

        # –ì—Ä–∞—Ñ—ñ–∫ 1: –£—Å—ñ —Å–ø–∞–ª–∞—Ö–∏
        fig_all = px.scatter(
            df_cycle,
            x="date",
            y="lat",
            hover_data=["date", "brightness", "importance"],
            title=f"–®–∏—Ä–æ—Ç–∏ –≤—Å—ñ—Ö —Å–ø–∞–ª–∞—Ö—ñ–≤ —É —Ü–∏–∫–ª—ñ {cycle}",
            **common_params
        )
        fig_all.update_layout(height=500)
        fig_all.update_traces(marker=dict(line=dict(width=1)))
        fig_all.update_yaxes(title="–®–∏—Ä–æ—Ç–∞ (¬∞)", range=[-90, 90])
        st.plotly_chart(fig_all, use_container_width=True)

        # –ì—Ä–∞—Ñ—ñ–∫ 2: –õ–∏—à–µ X —Ç–∞ M –∫–ª–∞—Å–∏
        df_class_xm = df_cycle[df_cycle["x_ray_class"].isin(["X", "M"])]
        if not df_class_xm.empty:
            fig_xm = px.scatter(
                df_class_xm,
                x="date",
                y="lat",
                hover_data=["brightness", "importance"],
                title=f"–®–∏—Ä–æ—Ç–∏ —Å–ø–∞–ª–∞—Ö—ñ–≤ –∫–ª–∞—Å—ñ–≤ X —ñ M —É —Ü–∏–∫–ª—ñ {cycle}",
                **common_params
            )
            fig_xm.update_layout(height=500)
            fig_xm.update_traces(marker=dict(line=dict(width=1)))
            fig_xm.update_yaxes(title="–®–∏—Ä–æ—Ç–∞ (¬∞)", range=[-90, 90])
            st.plotly_chart(fig_xm, use_container_width=True)

        # –ì—Ä–∞—Ñ—ñ–∫ 3: –õ–∏—à–µ —Ç—ñ, —â–æ –∑ CME
        df_cme = df_cycle[df_cycle['isCMEFlare'] == 1]
        if not df_cme.empty:
            fig_cme = px.scatter(
                df_cme,
                x="date",
                y="lat",
                hover_data=["brightness", "importance", "CME"],
                title=f"–®–∏—Ä–æ—Ç–∏ —Å–ø–∞–ª–∞—Ö—ñ–≤ –∑ CME —É —Ü–∏–∫–ª—ñ {cycle}",
                **common_params
            )
            fig_cme.update_layout(height=500)
            fig_cme.update_traces(marker=dict(line=dict(width=1)))
            fig_cme.update_yaxes(title="–®–∏—Ä–æ—Ç–∞ (¬∞)", range=[-90, 90])
            st.plotly_chart(fig_cme, use_container_width=True)

        # –ì—Ä–∞—Ñ—ñ–∫ 4: –ü—Ä–æ—Ç–æ–Ω–Ω—ñ —Å–ø–∞–ª–∞—Ö–∏
        df_protons = df_cycle[df_cycle['isProtonFlare'] == 1]
        if not df_protons.empty:
            fig_protons = px.scatter(
                df_protons,
                x="date",
                y="lat",
                hover_data=["brightness", "importance", "protons"],
                title=f"–®–∏—Ä–æ—Ç–∏ –ø—Ä–æ—Ç–æ–Ω–Ω–∏—Ö —Å–ø–∞–ª–∞—Ö—ñ–≤ —É —Ü–∏–∫–ª—ñ {cycle}",
                **common_params
            )
            fig_protons.update_layout(height=500)
            fig_protons.update_traces(marker=dict(line=dict(width=1)))
            fig_protons.update_yaxes(title="–®–∏—Ä–æ—Ç–∞ (¬∞)", range=[-90, 90])
            st.plotly_chart(fig_protons, use_container_width=True)

        # –ì—Ä–∞—Ñ—ñ–∫ 1: –£—Å—ñ —Å–ø–∞–ª–∞—Ö–∏ –∑ –æ–∫—Ä–µ–º–∏–º–∏ –ª—ñ–Ω—ñ—è–º–∏ —Ç—Ä–µ–Ω–¥—É –¥–ª—è –∫–æ–∂–Ω–æ—ó –ø—ñ–≤–∫—É–ª—ñ
        df_cycle_clean = df_cycle[["date", "lat", "x_ray_class", "lat_hemisphere", "brightness", "importance"]].copy()
        df_cycle_clean = df_cycle_clean.dropna(subset=["date", "lat", "lat_hemisphere"])

        fig_all = px.scatter(
            df_cycle_clean,
            x="date",
            y="lat",
            hover_data=["date", "brightness", "importance"],
            title=f"–®–∏—Ä–æ—Ç–∏ –≤—Å—ñ—Ö —Å–ø–∞–ª–∞—Ö—ñ–≤ —É —Ü–∏–∫–ª—ñ {cycle}",
            **common_params
        )
        fig_all.update_layout(height=500)
        fig_all.update_yaxes(title="–®–∏—Ä–æ—Ç–∞ (¬∞)", range=[-90, 90])
        fig_all.update_traces(marker=dict(line=dict(width=1)))

        # –î–æ–¥–∞—î–º–æ –ª—ñ–Ω—ñ—ó —Ç—Ä–µ–Ω–¥—É –¥–ª—è –∫–æ–∂–Ω–æ—ó –ø—ñ–≤–∫—É–ª—ñ –∑ —Ñ–æ—Ä–º—É–ª–∞–º–∏
        for hemisphere, group in df_cycle_clean.groupby("lat_hemisphere"):
            group = group.sort_values("date")
            if len(group) < 2:
                continue

            # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –¥–∞—Ç—É —É —á–∏—Å–ª–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–æ–ª—ñ–Ω–æ–º—ñ–∞–ª—å–Ω–æ—ó –∞–ø—Ä–æ–∫—Å–∏–º–∞—Ü—ñ—ó
            x_numeric = pd.to_numeric(group["date"])
            y = group["lat"]
            coef = np.polyfit(x_numeric, y, 1)
            trend_fn = np.poly1d(coef)
            # –ü–æ–±—É–¥–æ–≤–∞ –ª—ñ–Ω—ñ—ó —Ç—Ä–µ–Ω–¥—É
            x_range = np.linspace(x_numeric.min(), x_numeric.max(), 100)
            y_trend = trend_fn(x_range)

            # –†—ñ–≤–Ω—è–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ: y = a¬∑x + b
            a, b = coef
            equation = f"y = {a:.2e}¬∑x + {b:.2f}"

            # –î–æ–¥–∞—î–º–æ –ª—ñ–Ω—ñ—é –Ω–∞ –≥—Ä–∞—Ñ—ñ–∫
            fig_all.add_scatter(
                x=pd.to_datetime(x_range),
                y=y_trend,
                mode="lines",
                name=f"–¢—Ä–µ–Ω–¥ ({hemisphere}): {equation}",
                line=dict(width=2, dash="dot"),
                opacity = 1
            )

        st.plotly_chart(fig_all, use_container_width=True)

